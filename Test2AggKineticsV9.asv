% clc         % Clear work space
% close       % Close all figures
% (klpf,klmf,klpm,klmm,kap,kam,kn,knm,kbf,kbm,y00,p00,rs,rfm,n,m)
% (3e3,2e-8,3e3,2e-8,4e1,2e-8,2e-4,2e-5,2e-8,2e-10,2e-9,10e-9,5e-9,5e-6,800,9e6);
% (3e4,2e-6,3e4,2e-6,1e2,2e-7,2e-5,2e7,2e-8,2e-10,1e-10,2e-9,1e-5,1e-5,500,5e6);
%              (klpf,klmf,klpm,klmm,kap,kam ,kn  ,knm,kbf ,kbm  ,y00  ,p00 ,rs  ,rfm ,n  ,m)
% AggKineticsV9(6e4 ,2e-6,6e4 ,2e-6,0  ,2e-7,6e-5,0  ,2e-8,2e-10,1e-10,0   ,1e-5,1e-7,500,2e6);

clear       % Clear all variables
klpf = 5e4;
klmf = 2e-8;
kbf = klmf;
kn = 2e-5;
y00 = 5e-6;

klpm = 0;
klmm = 0;
kap = 0;
kam = 0;
knm = 0;
kbm = 0;
p00 = 0;
rs = 0;
rfm = 0;
n = 10000;
m = 1e6;

x = 1;
vScale = 1;



% Convert and Normalize Gillespie parameters
%(klpf,klmf,klpm,klmm,kap,kam,kn,knm,kbf,kbm,y0,p0,rs,n,m,v0)
v0 = 1e6/vScale;           % in nm^3
na = 6.022e23;      % Avogadro Num
v1 = v0*1e-15;       % Convert volume from (nm)^3 to liters
v = v1*na;           % facilitate conversion of # of mols to # of particles





% Don't forget to convert t using x
clpf = 1;
clmf = v*klmf/klpf;
clpm = klpm/klpf;
clmm = v*klmm/klpf;
cap = kap/klpf;
cam = v*kam/klpf;
cn = 2*kn/klpf;
cbf = clmf;             % Free aggregates breaking rate
y0 = round(v*y00);    % Convert concentration to number of particles in v0
% clpf = 2;
% clmf = 200 * 4;
% cbf = clmf;       % Free aggregates breaking rate
% cn = 2e-8;         % free nucleation
% y0 = 1e6;  

rfp = rfm*y00;          % flow supply rate
crfm = v*rfm/klpf;
crfp = crfm*y0; % flow supply of free monomers (crfp = crfm*y0)v^2*rfm*y00/klpf = v*rfm*y0/klpf

clpf =  x*clpf;
clpm =  x*clpm;
cap =   x*cap;
cn =    x*cn;
y0 =    round(y0/x);
crfm =  0;


% Display some numbers:
disp ('~~~~~~~~~~~~~~~~~~~~~~~')
disp (['klpf = ' num2str(klpf) '               klmf = ' num2str(klmf)])
disp (['kn = ' num2str(kn)])
disp (['kbf = ' num2str(kbf)])
disp (['y00 = ' num2str(y00)])
disp (['rfm = ' num2str(rfm) '                 rfp = ' num2str(rfp)])
disp ('=========================')
disp (['clpf = ' num2str(clpf) '               clmf = ' num2str(clmf)])
disp (['cn = ' num2str(cn)])
disp (['cbf = ' num2str(cbf)])
disp (['y0 = ' num2str(y0)])
disp (['crfm = ' num2str(crfm) '               crfp = ' num2str(crfp)])
disp ('~~~~~~~~~~~~~~~~~~~~~~~')
disp (['x = ' num2str(x)])
disp (['m = ' num2str(m) '               n = ' num2str(n)])
disp ('~~~~~~~~~~~~~~~~~~~~~~~')

% Initialize parameters

t = zeros(1,m);         % collect the time steps
F = zeros(1,m);         % Collect the amount of monomers in the free aggregates at each time step
y0t = zeros(1,m);       % the number of free monomers
inagg = zeros(1,m);     % Collect data on sequestered aggregates
y = zeros(1,n);         % The number of free aggregates of different length
dyin = 0;               % initialize parameters for the deterministic process
aa = zeros(1,4);       % Collect the propensity of each region
dfy = zeros(1,n);       % Collect the fractions of the specific y
rnt = zeros(1,m);


% nc = 2;               % Critical nucleation length - for membrane attachment
y(1) = y0;              % initial amount of monomers
yn = y(1);              % track the total number of free monomers and aggregates
y0t(1)=y(1);            % tracking free monomers as a function of time
rst = [1 2 4 2 2 1 3 2 1 1];           % the start i in each reaction region
re = [1 (n-1) n n n (n-1) n n n 1];   % the end i in each reaction region

a = zeros(4,n);
      
% None zero initial values
a(1,1) = cn*y(1)*(y(1)-1)/2;

% Sum all the none zero values
aa(1) = a(1,1);
a0 = sum(aa);
if a0==0
    disp('Warning - a0=0 !!!!')
end


disp ('xxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
disp (['Free nucleation weight = ' num2str(aa(1))])
disp ('xxxxxxxxxxxxxxxxxxxxxxxxxxxxx')

rn = 0;
tic;
% m number of iterations
for i=2:m
    % Add time step
    dt = log(1/rand)/a0;
    t(i) = t(i-1)+ dt;   

    % Get the reaction type number                           
    r = rand;           % Random number (0,1)
    rn = 1;             % the reaction number in a (1 to 10)
    s = aa(rn)/a0;      % accomulating the propensities
    while s < r
        rn = rn + 1;
        s = s + aa(rn)/a0;  
    end
    % find the reaction within the reaction type
    % agn1 is the possition in the y or g arrays
    agn1 = rst(rn);        % the first j in the correct region
    if rn~=1 && rn~=10                            
        s = s - aa(rn)/a0 + a(rn,agn1)/a0;      % return value to begining of reaction
        while s < r   
            agn1 =agn1 + 1;
            s = s + a(rn,agn1)/a0; 
        end
    end

    % Calculate the changes acording to the reaction that took place   
    switch rn
        case 1
            % Calculate y and g
            if y(1)>2
                y(1) = y(1)-2;
                yn = yn - 1;
                y(2) = y(2)+1;
                F(i) = F(i-1)+ 2;
                % reaction propensities that need update
                % a1 = cn*y(1)*(y(1)-1)/2;      Updated at the end
                % a2 = clpf*y(1)*y(2:(n-1));    Updated at the end 
                % a4 = 2*clmf*y(2:n);
                aold  = a(4,2);
                a(4,2) = clmf*y(2);
                aa(4) = aa(4)-aold+a(4,2);
            else
                F(i) = F(i-1);
            end
             
        case 2
            if y(1)>0 && y(agn1)>0
                % agn2 is the possition in the y or g arrays
                agn2 = agn1+1;
                % Calculate y and g
                y(agn1) = y(agn1)-1;
                y(1) = y(1)-1;
                y(agn2) = y(agn2)+1;
                F(i) = F(i-1)+ 1;
                yn = yn - 1;
                % Calculate changes
                if agn1>3
                    % a3 = cbf*y(4:n).*(i-3);
                    aold = a(3,agn1)+a(3,agn2);
                    a(3,agn1) = cbf*y(agn1)*(agn1-3);
                    a(3,agn2) = cbf*y(agn2)*(agn2-3);
                    aa(3) = aa(3) - aold + a(3,agn1)+a(3,agn2);
                elseif agn2>3
                    % a3 = cbf*y(4:n).*(i-3);
                    aold = a(3,agn2);
                    a(3,agn2) = cbf*y(agn2)*(agn2-3);
                    aa(3) = aa(3) - aold + a(3,agn2);
                end
                % reaction propensities that need update
                % a1 = cn*y(1)*(y(1)-1)/2;     Updated at the end
                % a2 = clpf*y(1)*y(2:(n-1));    Updated at the end 
                % a4 = 2*clmf*y(2:n);
                aold  = a(4,agn1)+a(4,agn2);
                a(4,agn1) = (1+(agn1>2))*clmf*y(agn1);
                a(4,agn2) = 2*clmf*y(agn2);
                aa(4) = aa(4)-aold+a(4,agn1)+a(4,agn2);
            else
                F(i) = F(i-1);
            end
        case 3
            if y(agn1)>0
                % agn2,3 are the possition in the y or g arrays
                agn2 = randi(agn1-3)+1;       % The aggregate can break at any bond, randomly
                agn3 = agn1-agn2;
                % Calculate y ang g 
                y(agn1) = y(agn1)-1;               
                y(agn2) = y(agn2)+1;        % y(ii)-> y(jj)+y(11-jj)
                y(agn3) = y(agn3)+1;
                yn = yn + 1;
                % Calculate changes
                if agn2~=agn3
                    % a2 = clpf*y(1)*y(2:(n-1));    Updated at the end 
                    % a4 = 2*clmf*y(2:n);
                    aold  = a(4,agn3);
                    a(4,agn3) = (1+(agn3>2))*clmf*y(agn3);
                    aa(4) = aa(4)-aold+a(4,agn3);
                    if agn3>3
                        % a3 = cbf*y(4:n).*yf;
                        aold = a(3,agn3);
                        a(3,agn3) = cbf*y(agn3)*(agn3-3);
                        aa(3) = aa(3) - aold + a(3,agn3);
                    end
                end 
                if agn2>3
                    % a3 = cbf*y(4:n).*yf;
                    aold = a(3,agn2);
                    a(3,agn2) = cbf*y(agn2)*(agn2-3);
                    aa(3) = aa(3) - aold + a(3,agn2);
                end          
                % reaction propensities that need update
                % a2 = clpf*y(1)*y(2:(n-1));    Updated at the end 
                % a3 = cbf*y(4:n).*yf; 
                aold = a(3,agn1);
                a(3,agn1) = cbf*y(agn1)*(agn1-3);
                aa(3) = aa(3) - aold + a(3,agn1);
                % a4 = 2*clmf*y(2:n);
                aold  = a(4,agn1)+a(4,agn2);
                a(4,agn1) = 2*clmf*y(agn1);
                a(4,agn2) = (1+(agn2>2))*clmf*y(agn2);
                aa(4) = aa(4)-aold+a(4,agn1)+a(4,agn2);
            end
            % F(i) does not change
            F(i) = F(i-1);     
        case 4
            if y(agn1)>0
                % agn2 is the possition in the y or g arrays
                agn2 = agn1 - 1;
                % Calculate y and g
                y(agn1) = y(agn1)- 1;   
                y(1) = y(1)+ 1;
                y(agn2) = y(agn2)+ 1; 
                if agn1>2
                    F(i) = F(i-1)- 1;
                else
                    F(i) = F(i-1)- 2;
                end
                yn = yn + 1;
                % Calculate changes
                if agn1>3
                    % a3 = cbf*y(4:n).*yf;
                    aold = a(3,agn1);
                    a(3,agn1) = cbf*y(agn1)*(agn1-3);
                    aa(3) = aa(3) - aold + a(3,agn1);
                end
                if agn2>3
                    % a3 = cbf*y(4:n).*yf;
                    aold = a(3,agn2);
                    a(3,agn2) = cbf*y(agn2)*(agn2-3);
                    aa(3) = aa(3) - aold + a(3,agn2);
                end
                if agn2>1
                    % a4 = 2*clmf*y(2:n);
                    aold  = a(4,agn2);
                    a(4,agn2) = (1+(agn2>2))*clmf*y(agn2);
                    aa(4) = aa(4)-aold+a(4,agn2);
                end
                % reaction propensities that need update 
                % a4 = 2*clmf*y(2:n);
                aold  = a(4,agn1);
                a(4,agn1) = 2*clmf*y(agn1);
                aa(4) = aa(4)-aold+a(4,agn1);
                % a1 = cn*y(1)*(y(1)-1)/2;      Updated at the end
                % a2 = clpf*y(1)*y(2:(n-1));    Updated at the end 
            else
                F(i) = F(i-1);
            end   
        otherwise
            % disp('Problem with the reaction number')   
    end
    
    % Always update 
    y0t(i) = y(1);
    % reaction propensities that need update
    % a1 = cn*y(1)*(y(1)-1)/2;  
    a(1,1) = cn*y(1)*(y(1)-1)/2;
    aa(1) = a(1,1);
    % a2 = clpf*y(1)*y(2:(n-1));
    a(2,rst(2):re(2))= clpf*y(1)*y(2:(n-1));
    aa(2) = sum(a(2,:));
    % Sum propensities
    a0 = sum(aa);
    rnt(i) = rn;
end



rtime = toc;
disp(['Program run time' num2str(rtime)])
% Real world time: treal = t(m)*v/klpf/3600;
t = t*v/klpf/3600;      % Covert Gillespie time to real time 
treal = max(t);

xFactor = floor(log10(max(t)));
t = t/(10^xFactor);
tMax = max(t);


disp (['treal = ' num2str(treal)])
disp ('+++++++++++++++++++++++++++++')
disp (['y(end) = ' num2str(y(end))])
disp ('+++++++++++++++++++++++++++++')


%  Normelizing resualts - to avoid exponents in plots %
F = F*x/v;
y2 = max(F);
% y3 = max(y0t);
y3 = 0;
ymax = max([y2 y3]);

yFactor = floor(log10(ymax));   % the 10 power of ymax
ymax = ymax/(10^yFactor);
F = F/(10^yFactor);
y0t = y0t/(10^yFactor);



plot(t,F,'-');
legend('Free Agg.','Location','NEO');
title('Total momomers in aggregates');
%plot label
xlabel(['Time  x10^{' num2str(xFactor) '} [H]']);
ylabel(['Aggregates mass concentration  x10^{' num2str(yFactor) '}[M]']);

% ymax = max([M F y0t]);
ylim([0 ymax*1.05]);
xlim([0 tMax]);


str1 = sprintf('klpf=%.2g, klmf=%.2g',klpf,klmf);
str2 = sprintf('\nkn=%.2g',kn);
str3 = sprintf('\nkbf=%.2g \ny=%.2g',kbf,y00);
str5 = sprintf('\nn=%.2g, m=%.2g \nv0=%.2g',n,m,v0);
str6 = sprintf('\ny0=%i',y0);
str7 = sprintf('\n\nRun time: %g \nReal Time: %g',rtime,treal);
plottext = [str1 str2 str3 str5 str6 str7];
%gtext(plottext)
Ypos = ymax*0.4;
Xpos = tMax*1.05;
text(Xpos,Ypos,plottext)
% filename = ['AggKin plot ' datestr(clock) '.jpg'];
% fname = sprintf('y0=%.2g p0=%.2g kbm=%.2g klmm=%.2g kam=%.2g',y0,p0,kbm,klmm,kam);
fname = sprintf('y00=%.2g y0=%i x=%.2g',y00,y0,x);
filename = ['AggKin - Paper test ' fname '.jpg'];
filename = strrep(filename,':','-');
h = gcf;
saveas(h,filename);


